/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Components;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Window;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;


/**
 *
 * @author user
 */
public class PanelBorder extends javax.swing.JPanel {

    private int positionX;
    private int positionY;

    /**
     * Creates new form PanelBorder
     */
    public PanelBorder() {
        initComponents();
        setOpaque(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    @Override
    protected void paintComponent(Graphics grphcs) {
        Graphics2D g2 = (Graphics2D) grphcs; // Converto o Graphics em Graphics2D pra gráficos avançados
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON); // Ativo o suavizamento das bordas para deixar o desenho mais suave
        g2.setColor(getBackground()); // Defino cor de fundo //
        g2.fillRoundRect(0, 0, getWidth(), getHeight(), 15, 15); // Preencho um retângulo arredondado que ocupa toda a área do componente com um radius de 15
        super.paintComponent(grphcs); //  Chamando o método da classe pai para garantir que o componente seja desenhado corretamente
    }

    public void initMoving(Window fram ) { // Window é a classe pai de JFrame e JDialog, e devido ao Polimorfismo subclasses podem ser tratadas como sua classe pai ( só não podendo chamar metodos que não existe na classe pai )- assim não é necessario repetir o codigo com parametros de JFrame e JDialog
        this.addMouseListener(new MouseAdapter() { //  Listenet do mouse para detectar quando o botão do mouse é pressionado
            @Override // Sobreescrever o metodo da classe pai
            public void mousePressed(MouseEvent me) { // Armazeno a posição do mouse quando ele é pressionado
                positionX = me.getX();
                positionY = me.getY();
            }
        });
        this.addMouseMotionListener(new MouseMotionAdapter() { //  Listener de movimento do mouse para mover a janela quando o mouse é arrastado
            @Override
            public void mouseDragged(MouseEvent me) {
                fram.setLocation(me.getXOnScreen() - positionX, me.getYOnScreen() - positionY); // Movendo o Jframe para a nova posição com base na posição do mouse na tela
            }
        });
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(748, 703));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
